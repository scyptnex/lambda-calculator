apply plugin: 'application'
apply plugin: 'antlr'
apply plugin: 'jacoco'
apply plugin: 'java'

sourceCompatibility = 1.8
group = 'lambda-calculator'
version = 0.1
defaultTasks 'installDist'
mainClassName = 'io.github.scyptnex.lcalc.Main'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'
    antlr 'org.antlr:antlr4:4.5' // use ANTLR version 4
}

// I want to see the tests that run
test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// We use these test reports to fail builds with insifficieent coverage.
// There is a way to configure coverage-failure from within gradle using:
// https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle
// My groovy is not good enough to rely on the jacoco-plugin not changing, so until they implement
// fail-on-low-coverage in the jacoco plugin, i will defer it to a python script
jacocoTestReport {
    reports {
        csv.enabled true
        csv.destination "${buildDir}/jacoco.csv"
    }

    doLast {
        def check_process = new ProcessBuilder()
                .command("python3", "${rootDir}/.travis/coverage_check.py",
                "-x", "lcalc\\.Main\$", "-x", "\\.parser\\.gen\\.Untyped",
                "--class=100-100", "--method=90-95", "--line=80-85",
                "${buildDir}/jacoco.csv")
                .redirectErrorStream(true)
                .start()
        def msg=""
        check_process.inputStream.eachLine {msg+="\n" + it}
        check_process.inputStream.close()
        if(check_process.waitFor() != 0) {
            throw new GradleException('Code coverage failed:' + msg)
        } else {
            logger.lifecycle(' - coverage check passed')
        }

    }

}
check.dependsOn jacocoTestReport

// Set the generator path for the antlr grammar
generateGrammarSource {
    arguments += ["-visitor", "-no-listener", "-package", "io.github.scyptnex.lcalc.parser.gen"];
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'; // A bug in the antlr plugin was fixed in 2.7
}
